[H/M]

overflow:

1. versions before 0.8.0 are unchecked
2. unchecked { uint8 var = uint8.max + 1 ; }


underflow:

1. versions before 0.8.0 are unchecked
2. unchecked { uint8 var = 0 - 1 ; }


precision loss / rounding:

1. solidity doesn't support floating point decimal so we have to be aware of data loss
2. uint256 res = 225/4; //this will be 56, but actual result must be 56.25
3. when we see a division sign '/' , we must check for rounding errors and think of edge cases
4. we can use https://www.mathsisfun.com/calculator-precision.html to check for precision loss


Mitigations:
   -> always first multiply by the precision you need
   -> be aware that your variable may overflow if yoy just multiplied by 100
   -> follow the rule: "Always multiply before division"
   -> 1e18 means 1  with 18 zeroes (1*(10^18)) which is exactly the ration between 1eth and 1wei
