// SPDX-License-Identifier: GPI3
pragma solidity > 0.7.0 <= 0.9.0;

contract Sender{
    event MoneyReceived(string _func, uint256 _amount, address _address);
    event ReturnedData(bool success, bytes _data);
    event MoneySent(uint256 _amount);

    function transferMoney(address _receiverAddr, uint256 _amount) public{
        // we can put the denomination but it is not a good practice cus the EVM works with wei
        // should be explicitly cast that to payable for readability 
        // and the compilator won't give errors trying to protect us 
        payable(_receiverAddr).transfer(_amount);
        emit MoneySent(_amount);
        // the transfer function sends exactly 2300 gas (to secure from the reentrance problem)
        // and because the fallback and receive fucntion shouldn't have any business logic
        // every emit costs gas so if we have too much emit params we cannot
        // finish the receiving and revert everything
        // the transfer function is somehow internal to every address
        // the transfer function is the most used because 
        // it always reverts it smth bad happens
        // which will terminate the transferMoney function as well
    }

        // the other way of sending is .send
        // the send (lowlevel - returns boolean) doesn't reverts the transaction
        // so we will continue executing the function which invokes the send
        // whereas the transfer is a high-leve lfunc and will throw exception
        // sends 2300 gas as well (reentrance)
        function sendMoney(address payable _receiverAddr, uint256 _amount) public returns(bool){
            bool success = _receiverAddr.send(_amount);

            if(success){
                emit MoneySent(_amount);
            }
            else {
                require(success, "schupi se");
            }

            return success;
    }

    fallback() external payable {
        emit MoneyReceived("fallback", msg.value, msg.sender);
    }
    receive() external payable{
        emit MoneyReceived("receive", msg.value, msg.sender);
    }

    function callSC(address payable _receiverAddr, uint256 _amount, uint256 _gas) public{
        // calling a funciton from other SC and getting its returned data
        // sedning some crypto and giving gas (which is good to be ~2300)
        // returning whether it is successful or not and 
        // bytes are the return value from the other function which should be decoded
        // the call is like send but with much more possible actions
        // in the brackets we put the function that we want to call + ()
        // always with call we hit the fallback because of that string
        // the empty string is some data send so -> fallback
        // the function name should be encoded in specific way for function (encode with signature)
        // furthermore the function should be payable to get executed because we are sending money
        // if it is not we hit the fallback and everything seems successful
        // if we don't specify the gas, the call function sends all the gas that we have available which is insecure for Reentrance
        (bool success, bytes memory data) = _receiverAddr.call{value: _amount, gas: _gas}(abi.encodeWithSignature("increment()"));
        emit ReturnedData(success, data);
    }

    function callFunc(address payable _receiverAddr, uint256 _gas, uint8 _num1, uint8 _num2) public returns(uint16){
        // a call wihtout sending crypto (try)
        (bool success, bytes memory data) = _receiverAddr.call{gas: _gas}(abi.encodeWithSignature("sum(uint8,uint8)",_num1,_num2));
        emit ReturnedData(success, data);
        //when decoding we should specify the data's type
        return abi.decode(data, (uint16));
    }

    function callFunc2(address payable _receiverAddr, uint256 _gas, uint8 _num1, uint8 _num2) public returns(uint16){
        // a call wihtout sending crypto (try)
        (bool success, bytes memory data) = _receiverAddr.call{gas: _gas}(abi.encodeWithSignature("sum2(uint8,uint8)",_num1,_num2));
        emit ReturnedData(success, data);
        //when decoding we should specify the data's type
        return abi.decode(data, (uint16));
    }

    function dcall(address payable _receiverAddr) public {
        // similar to call but executes the function in the sender context (see TxContext data from increment)
        // even if there are varisables that don't exist (num) we increment the first one 
        // which is in this context and has the same field type. If there isn't any it gets executed okay
        // we don't know why 
        // thats why delegatecall is used mostly (only) in libraries 
        (bool success, bytes memory data) = _receiverAddr.delegatecall(abi.encodeWithSignature("increment()"));
        emit ReturnedData(success, data);
    }

}

contract Receiver {
    uint8 num;
    event MoneyReceived(string _func, uint256 _amount);
    event GasLeft(uint256 _gasLeft);
    event TxContext(uint256 _gasLeft, address _sender, address _origin, address _current);

    struct Student{
        uint8 age;
        string name;
    }

    fallback() external payable {
        emit MoneyReceived("fallback", msg.value);
    }
    receive() external payable{
        emit MoneyReceived("receive", msg.value);
    }
    function getBalance() public view returns(uint256){
        return address(this).balance;
    }

    function increment() public payable{
        num++;
        emit TxContext(gasleft(), msg.sender, tx.origin, address(this));
    }

    function getNum() public view returns(uint8){
        return num;
    }

    function sum(uint8 _num1, uint8 _num2) public returns(uint16){
        emit GasLeft(gasleft());
        return (_num1 + _num2);
    }

    function sum2(uint8 _num1, uint8 _num2) public returns(uint16){
        // on transaction we have some primitives for now they are tx and msg
        // sender will be the SC from where the transacation is invoked
        // origin is the address of whom has called the function of the sender
        // current will be the address where this event is called
        // msg.sender the one who is calling the function (the previous before the execution of this func)
        // context-s na neposredstvenoto izvikvane ot SC1 -> SC2 e v msg
        // tx e za celiq callchain
        // tx.origin the address of the user who is invkoing this transaction
        // 
        emit TxContext(gasleft(), msg.sender, tx.origin, address(this));
        return (_num1 + _num2);

        //Student memory student = Student(25, "Alex");
    }
    
}