// SPDX-License-Identifier: MIT
pragma solidity >= 0.7.0 < 0.9.0;


// abi e interface-a на SC-a и се нуждаем от него, за да викаме SC-a
// abi се създава по време на компилация
// служи, за да представи bytecode-a, като без него не може да си комуникираме с bytecode-a
// може в него да имаме само функции, които ще използва потребителя ( не всички ), не е необходимо да е целия
// abi-то е необходимо само за call-oве идващи извън ledger-a 
// ако е вътрешно, от SC до SC вътрешни за legder-a не е необходимо.
// В този случай става само с подпис и извикване с encodeWithSigntaure ( в някакъв смисъл пак е интерфейс,
// но не се води abi) и ти връща серия от байтове точно заради това не е необходимо да
// се оказва return type-a, както е в abi-тo 


// ако след време нашият SC вече не ни върши работа (нещо се е променило)
// то тогава може да го disable-нем и по този начин спираме възможността 
// да се интерактва с него (destroy), като това действие е перманентно 
contract A {
    uint256 num = 10;

    function getNum() public view returns(uint256){
        return num;
    }

    function destroySC(address payable _addr) public{
       	// преди да се деструктурира ще изпрати всички пари на този adress
       	// дори да няма fallback функция или receive функция 
	// deprecated e 
	// друго решение e да се използва прокси SC
        selfdestruct(_addr);
    }

    receive() external payable { }
}

contract B {
    function getBalance() public view returns(uint256){
        return address(this).balance;
    }
}

theory 14.04.24

payload - additional info about the transaction
ERC - ethereum request for comment 
usually form standards around usage of the protocol
must be followed by each Ethereum user
ERC20 token standard - правила относно използването на крипто, ако искате да обработвате крипто, трябва да се следват тези правила
ERC721 - правила за NFT-тo, ако искаме EVM да работи с тях
ERC1155 - контролира и двете - crypto и NFTs

can be submitted by every Ethereum member
can be elevated to an EIP 
the standards are not a change on the network itself

понеже стават стандарти мрежата не се променя, но изисква тези правила

EIP - ethereum improvement proposal - касае самия протокол, а не използването му 
directly change of the protocol not just its usage
similar to erc, but very serious changes
changes the protocol itself
must be implemented by each Ethereum client - всеки един node трябва да си свали и да си run-не новата версия
ако не го направят всички, а <50% може да не се използва изобщо, а ако са 50~50 може да се получи fork
Handled by the core developers (обсъжда се от всички доста време - например PoS се е обсъждало от 2018)

EIP-3675 - upgrade to PoS

ATTACKS

51% attack - validators gather and propose fake things

race attack - купуваме кафе от costa - пускаме транзакцията с възможно най-малко gas (от П1), за да може да отнеме повече време на валидаторите (не е апетитна)
съответно продавача вижда, че са се запътили към него парите и ни дава кафето. 
пускаме втора транзакция с много gas към друг наш портфеил (от П1 към П2) и тя се изпълнява преди другата (валидира се по-бързо),
защото е по-нагоре в memory pool-a заради gas-та и втората транзакция (към Коста) се reject-ва, защото в П1 вече няма BTC.

finney attack - Hone? Finney (worked with Satoshi for the deployment) подобно на race-a, но от страна на miner-ите.
Той си приготвя блок, с който да прати btc на себе си (в друг портфейл), но не го обявява. И в момента, в който пуснем пари на 
costa си обявяваме блока и тя минава, защото е валидна, a 1-тo btc, което сме пратили няма да се одобри, защото вече няма да го има в портфейла.

reentrancy attack - Атакуващият SC иска да му се дадат някакви пари (валидно) и има право да ги изтегли, но в собствения си fallback прави същата заявка,
защото този, който трябва да му освободи крипотото не успява да "мине на следващия ред" и да отбележи, че вече му е платено преди да излезем от цикъла във fallback-a.
По този начин има източени около 50mln от DAO - decentralized autonomy organization

selfish mining
longest chain печели - демек започвам от дълбочина х и копам 5 блока и когато ги обява, дори да са изкопали другите вече 3 (х+3) до момента, моите 5 блока са по-дълга верига 
и ще презапишат 3-те блока от преди това (от х)

Prefer using:
- Transfer() over send() (high level it gets terminated if we dont care if a transaction is failed we can use send)
- require() over assert() and revert() (they have many specifics with gas revert & assert take all the gas)
- loops as less as possible
- withdraw pattern over send/push pattern (винаги е по-добре изплащането да бъде тригерирано от получателя- в случая на казиното
	да има възможност участниците да заявят печалбата си след врътката)
- calling internal or verified SC over random SC (always prefer our/audited code rather than using some functionality from external code - opens to reenntrancy, other attacks)
- Commitment schemes over revealing information (разкрива информация постепенно и на части за нуждите на потребителя. Самия SC не е хуабво да дава повече info,
	отколкото е необходимо. Ако го прави, потребителят започва да се шашка и да се обърква (пирамидаджий и т.н)
- linear inheritance over multiple inheritance 
- explicit code when developing - указване на големината на променливите
- as less storage/memory space as possible

въпрос на теста - infura - API, което надгражда възможностите на един node да стане публичен. Дава възможност да се пускат транзакции от техния node от нас. 
Ако нямаме node, няма как да си комуникираме с мрежата. Infura позволява до около 100 000 заявки за 24 часа

proxy SC e SC, който стои между потребителите и SC, то пази като пропърти крайния SC, който може да се промени при необходимост (невалиден SC1)

при форк (инцидентен) след време единият клон изпада и транзакциите от него се слагат в mempool-а с висок приоритет, за да бъдат изпълнени все пак.
Идеята е да се избегне случая: получили сме някакво крипто и след 3 блока вече го нямаме.

Oracle - SC, през който може да се взимат данни извън blockchain мрежата