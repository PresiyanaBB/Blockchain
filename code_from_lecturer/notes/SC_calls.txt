// SPDX-License-Identifier: GPI3
pragma solidity > 0.7.0 <= 0.9.0;

contract Sender{
    event MoneyReceived(string _func, uint256 _amount, address _address);

    event MoneySent(uint256 _amount);

    function transferMoney(address _receiverAddr, uint256 _amount) public{
        // we can put the denomination but it is not a good practice cus the EVM works with wei
        // should be explicitly cast that to payable for readability 
        // and the compilator won't give errors trying to protect us 
        payable(_receiverAddr).transfer(_amount);
        emit MoneySent(_amount);
        // the transfer function sends exactly 2300 gas (to secure from the reentrance problem)
        // and because the fallback and receive fucntion shouldn't have any business logic
        // every emit costs gas so if we have too much emit params we cannot
        // finish the receiving and revert everything
        // the transfer function is somehow internal to every address
        // the transfer function is the most used because 
        // it always reverts it smth bad happens
        // which will terminate the transferMoney function as well
    }

        // the other way of sending is .send
        // the send (lowlevel - returns boolean) doesn't reverts the transaction
        // so we will continue executing the function which invokes the send
        // whereas the transfer is a high-leve lfunc and will throw exception
        // sends 2300 gas as well (reentrance)
        function sendMoney(address payable _receiverAddr, uint256 _amount) public returns(bool){
            bool success = _receiverAddr.send(_amount);

            if(success){
                emit MoneySent(_amount);
            }
            else {
                require(success, "schupi se");
            }

            return success;
    }

    fallback() external payable {
        emit MoneyReceived("fallback", msg.value, msg.sender);
    }
    receive() external payable{
        emit MoneyReceived("receive", msg.value, msg.sender);
    }

}

contract Receiver {
    event MoneyReceived(string _func, uint256 _amount);

    fallback() external payable {
        emit MoneyReceived("fallback", msg.value);
    }
    receive() external payable{
        emit MoneyReceived("receive", msg.value);
    }
    function getBalance() public view returns(uint256){
        return address(this).balance;
    }
    
}