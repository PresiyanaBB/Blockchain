// SPDX-License-Identifier: GPI3
pragma solidity > 0.7.0 <= 0.9.0;

contract LoopTest {
    //all fileds (state fields)
    //by default are storage memory where po prezumciq we have infinite space to store on the ledger
    //no problem to be not initialized because it is treated like vector 
    uint256[] private arr;
    mapping (uint256 => bool) intMap;
    // because of the fact that we cannot get the length of the map since the keys in the map are actual memory adresses and
    // the VM doesn't need them stored we don't know how much are they
    // thats why there is an array with the keys so that we can now how much are the users and who are they
    // for example we have a lottery and have to pick one of the addresses so we should store them somehow
    // if we don't need that and we need only the size it is totally okay to store uint256 counter instead
    // maps don't have any methods they are really simple :).


    //everything else by default is call or memory - functions etc.

    //we set that the memoty- arr we have to return is in ram - memory keyword
    function setArr(uint256 _size) public pure returns(uint256[] memory){
        uint256[] memory localArr; //1)
        uint256[] memory localArr2 = new uint256[](5); //2)

    //vs raboti idealno
        for(uint256 i = 0; i < _size ; ++i){
            // 1) push guesses that the array size won't be corrupted
            // 1) localArr.push(i);
            // 1) this time we will try to change an elemnt for which we haven't allocate memory
            // 1) localArr[i] = i;
            // 2) this will not work as well since the array is 5 items and the push will try to push and make it 6, which 
            // will exceed its size 
            // 2) localArr2.push(i);
            // 2) thats why we use indexing for adding values to the array
            localArr2[i] = i;

        }
        return localArr;
    }

    function getArr() public view returns(uint256[] memory){
        return arr;
    }

    // r could be memory or calldata - in both ways this param will exists only in execution of this function
    //param and return memory type should be the same
    function setArrDynamically(uint256[] calldata r) public pure returns(uint256[] calldata _r){
        return r;
    }


    function createArr()public pure returns(uint256[] memory){
        //it is nessecary to be memory
        // can't be storage or calldata
        uint256[] memory arr1 = new uint256[](5);

        // gives error when usinf uint256[] here, because this numbers can be of type uint8 , which is cheaper
        //we should't consume more gas than needed
        //don't allocate more memory than needed 
        uint8[5] memory arr2 = [1,2,3,4,5];

        arr2[3] = 8;

        return arr1;
    }

    function compareArr() public pure returns(bool){
        uint8[5] memory arr2 = [1,2,3,4,5];
        uint8[5] memory arr3 = [2,2,3,4,5];

        //arr2 is a reference to the first element in the array
        // we need series of bytes so that when we call  keccak256 - we can give series of bytes
        return keccak256(abi.encodePacked(arr2)) == keccak256(abi.encodePacked(arr3));
    
        // encode - sets padding !!! between each element
        // encodePacket - doesn't set padding
        // encode / encodePacket - gives us all bytes like series of bytes 
        //Keccak256()takes in byte arrays (bytes)
        // as input.abi.encodePacked or abi.encode turns input parameters into byte arrays.

    }

    function compareString() public pure returns(bytes memory, bytes memory){
        string memory str1 = "a";
        string memory str2 = "a";
        return (abi.encodePacked(str1), (abi.encodePacked(str2)));
    }


    //the maps have hash table underneath so we cannot declare it in the memory since we won't know the size
    function getMapLength() public view returns (uint256) {
        //this won't work since we cannot know what will be the size of the map
        return intMap.length;
    }
}