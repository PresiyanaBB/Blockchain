[H/M]

DoS (denial of service): 

1. When our contract gets too expensive due to gas

2. for(int i=0; i < arr.length ; ++i)
   -> if the array is dynamic and can grow to more than for example 5-10 elements than it is too gas efficient at the end
   -> if it has unbounded length

3. for loop in another for loop

4. If we revert when we don't really want or won't be ideal if we do
   -> (bool success, bytes memory data) = payable(receiverAddr).call{ value:amount , gas:gasLimit}("");
   -> if success is false because the receiver doesn't have reveice or fallback, or gas wasn't enough and we revert but we really want our function to finish

5. If there is a call is there any chance it can fail and if so - is there a chance some important function reverts
   -> if there is set gas limit in the call func
   -> if we send eth(or whatever the native token is) but it doesn't have receive/fallback
   -> if the function we are calling doen't exist

6. We should check if we hold array of addresses when depositing funds, can funds be 0 or address be 0x0
   -> if we enter the array with 0 funds:
      -> it will gas problem (hold useless data because he can spam this transaction with msg.value==0)
      -> if we then destribute the funds towards users maybe the attacker will receive money

7. If we have upper bound of users that we can hold, then this may be a problem 
   -> maxUsers = 100 ;  //user number 101 will be denied of service (we may want this but we should ask question) 


Mitigations: 
   -> use mapping
